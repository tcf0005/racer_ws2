// Generated by gencpp from file joytransfer/ServoArray.msg
// DO NOT EDIT!


#ifndef JOYTRANSFER_MESSAGE_SERVOARRAY_H
#define JOYTRANSFER_MESSAGE_SERVOARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <joytransfer/Servo.h>

namespace joytransfer
{
template <class ContainerAllocator>
struct ServoArray_
{
  typedef ServoArray_<ContainerAllocator> Type;

  ServoArray_()
    : servos()  {
    }
  ServoArray_(const ContainerAllocator& _alloc)
    : servos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::joytransfer::Servo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::joytransfer::Servo_<ContainerAllocator> >::other >  _servos_type;
  _servos_type servos;





  typedef boost::shared_ptr< ::joytransfer::ServoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joytransfer::ServoArray_<ContainerAllocator> const> ConstPtr;

}; // struct ServoArray_

typedef ::joytransfer::ServoArray_<std::allocator<void> > ServoArray;

typedef boost::shared_ptr< ::joytransfer::ServoArray > ServoArrayPtr;
typedef boost::shared_ptr< ::joytransfer::ServoArray const> ServoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joytransfer::ServoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joytransfer::ServoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joytransfer::ServoArray_<ContainerAllocator1> & lhs, const ::joytransfer::ServoArray_<ContainerAllocator2> & rhs)
{
  return lhs.servos == rhs.servos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joytransfer::ServoArray_<ContainerAllocator1> & lhs, const ::joytransfer::ServoArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joytransfer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::joytransfer::ServoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joytransfer::ServoArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joytransfer::ServoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joytransfer::ServoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joytransfer::ServoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joytransfer::ServoArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joytransfer::ServoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7dcfd407a2095ba27997610e5008ca84";
  }

  static const char* value(const ::joytransfer::ServoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7dcfd407a2095ba2ULL;
  static const uint64_t static_value2 = 0x7997610e5008ca84ULL;
};

template<class ContainerAllocator>
struct DataType< ::joytransfer::ServoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joytransfer/ServoArray";
  }

  static const char* value(const ::joytransfer::ServoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joytransfer::ServoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the ServoArray message is commonly used message in this package to\n"
"# handle multiple assignments of values to servos. the purpose of\n"
"# the value is dependent on the topic or service being called\n"
"\n"
"Servo[] servos\n"
"\n"
"================================================================================\n"
"MSG: joytransfer/Servo\n"
"# the Servo message is commonly used message in this package to\n"
"# assign a value to a specific servo. the purpose of the value is\n"
"# dependent on the topic or service being called\n"
"\n"
"int16 servo\n"
"float32 value\n"
;
  }

  static const char* value(const ::joytransfer::ServoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joytransfer::ServoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joytransfer::ServoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joytransfer::ServoArray_<ContainerAllocator>& v)
  {
    s << indent << "servos[]" << std::endl;
    for (size_t i = 0; i < v.servos.size(); ++i)
    {
      s << indent << "  servos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::joytransfer::Servo_<ContainerAllocator> >::stream(s, indent + "    ", v.servos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOYTRANSFER_MESSAGE_SERVOARRAY_H
